# Задача-1: Написать класс для фигуры-треугольника, заданного координатами трех точек.
# Определить методы, позволяющие вычислить: площадь, высоту и периметр фигуры.
from math import sqrt

class Triangle:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c
        # Вычисляем длины сторон
        self.ab = sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2)
        self.ac = sqrt((a[0] - c[0]) ** 2 + (a[1] - c[1]) ** 2)
        self.bc = sqrt((b[0] - c[0]) ** 2 + (b[1] - c[1]) ** 2)

    def area(self):
        """
        Вычисление площади треугольника
        """
        return abs((self.b[0] - self.a[0]) * (self.c[1] - self.a[1]) -
                   (self.c[0] - self.a[0]) * (self.b[1] - self.a[1])) / 2

    def height(self, side=None):
        """
        Вычисление высоты треугольника
        :param side: Необязательный параметр, указывающий сторону-основание
                     треугольника для рассчёта. Допустимые значения a, b или с.
        :return: Если указана сторона-основание треугольника, то возвращает
                 вычисленное значение для этой стороны. Если же ничего не указано,
                 или указано недопустимое значение, то возвращает словарь,
                 где ключ - это сторона для котороый произведён рассчёт, а
                 значение , соотвественно результат рассчёта.
        """
        # Что бы не нагружать процессор однотипными задачами на вычисление,
        # сохраняем произведение площади в переменную
        ds = self.area() * 2

        # Вычисляем высоты
        if side and side.lower() in {'a', 'b', 'c'}:
            if side.lower() == 'a':
                return ds / self.bc
            elif side.lower() == 'b':
                return ds / self.ac
            else:
                return ds / self.ab
        else:
            return {'a': ds / self.bc, 'b': ds / self.ac, 'c': ds / self.ab}

    def perimeter(self):
        """
        Вычисление периметра треугольника
        """
        return self.ab + self.bc + self.ac


print("# Задача-1:")
t = Triangle((-7, 2), (5, -3), (1, 8))
print(f"Координаты треугольника: a{t.a} ,b{t.b}, c{t.c}")
print(f"Площадь треугольника: {t.area()}")
print(f"Периметр треугольника: {t.perimeter()}")
print(f"Высота треугольника относительно стороны а: {t.height('a')}")
print(f"Высота треугольника относительно стороны b: {t.height('b')}")
print(f"Высота треугольника относительно стороны c: {t.height('c')}")


# Задача-2: Написать Класс "Равнобочная трапеция", заданной координатами 4-х точек.
# Предусмотреть в классе методы:
# проверка, является ли фигура равнобочной трапецией;
# вычисления: длины сторон, периметр, площадь.


class Trapezium:
    def __init__(self, a, b, c, d):
        self.ab = sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2)
        self.bc = sqrt((b[0] - c[0]) ** 2 + (b[1] - c[1]) ** 2)
        self.cd = sqrt((c[0] - d[0]) ** 2 + (c[1] - d[1]) ** 2)
        self.ad = sqrt((d[0] - a[0]) ** 2 + (d[1] - a[1]) ** 2)

    def area(self):
        """
        Вычисление площади равнобедренной трапеции
        """
        if self.is_isosceles():
            h = sqrt(self.ab ** 2 - (self.bc - self.ad) ** 2 / 4)
            return ((self.ab + self.cd) / 2) * h
        else:
            return "Вычисление не возможно, так как данная трапеция не является равнобедренной"

    def perimeter(self):
        """
        Вычисление периметра равнобедренной трапеции
        """
        if self.is_isosceles():
            return self.ab + self.bc + self.cd + self.ad
        else:
            return "Вычисление не возможно, так как данная трапеция не является равнобедренной"

    def side_len(self, side=None):
        """
        Вычисление длин сторон трапеции.
        :param side: Необязательный параметр, указывает имя стороны трапеции для рассчёта.
                     Допускаются следующие значения: 'a', 'b', 'c', 'd', 'ab', 'bc', 'cd', 'ad'.
        :return: Если указана сторона для рассчёта, то возвращается результат вычисления
                 только для этой стороны. Если сторона не указана, то возвращается словарь, где
                 ключ - наименование стороны, а значение результат рассчёта.
        """
        if side and side.lower() in ('a', 'b', 'c', 'd', 'ab', 'bc', 'cd', 'ad'):
            if side.lower() in ('a', 'ab'):
                return self.ab
            elif side.lower() in ('b', 'bc'):
                return self.bc
            elif side.lower() in ('c', 'cd'):
                return self.cd
            elif side.lower() in ('d', 'ad'):
                return self.ad
        else:
            return {'ab': self.ab, 'bc': self.bc, 'cd': self.cd, 'ad': self.ad}

    def is_isosceles(self):
        """
        Проверка, является ли трапеция с указанными координатами равнобедренной
        """
        return self.ab == self.cd

print("\n# Задача-2:")
tr = Trapezium((1, 1), (4, 7), (8, 7), (11, 1))
print(f"Трапеция равнобедренная(равнобочная): {tr.is_isosceles()}")
print(f"Площадь трапеции: {tr.area()}")
print(f"Периметр трапеции: {tr.perimeter()}")
print(f"Длинны сторон трапеции: { tr.side_len()}")

